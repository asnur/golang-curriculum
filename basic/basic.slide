#GDSC NF - Speaker Series (Backend)

Go Programming Language
Fundamental of Golang

Muhammad Asnur Ramdani
Backend GIS Programmer, DPMPTSP DKI Jakarta
asnurramdhani12@gmail.com

Google Developer Student Club - STTNF

* 
.html ./html/quotes.html

* Introduction
.image ./images/golang-img.png

* Sejarah Singkat
- Bahasa pemrograman Go (atau Golang) dikembangkan oleh Google pada tahun 2007 oleh Robert Griesemer, Rob Pike, dan Ken Thompson. 
- Tujuan utama dari pengembangan Go adalah untuk membuat bahasa yang sederhana, efisien, dan mudah digunakan untuk pengembangan aplikasi skala besar di lingkungan jaringan.
- Bahasa ini dirilis sebagai open source pada tahun 2009 dan sejak itu telah menjadi populer di kalangan pengembang aplikasi web, sistem, dan aplikasi perangkat keras.

*  Kenapa Kita Golang?
- Performa yang baik
- Sederhana dan mudah dipelajari
- Skalabilitas dan Keamanan
- Cross-Platform
- Kebutuhan industri

*  Fitur Golang
- Garbage Collection
- Concurrency
- Type Inference

*  Teknologi yang dikembangkan menggunakan Golang
.html ./html/tech.html

* Perusahaan yang menggunakan Golang
.html ./html/company.html

* Download & Install
- Download Golang dan Install di [[https://golang.org][https://golang.org/dl/]].
- pilih sesuai dengan OS yang digunakan dan ikuti langkah-langkahnya.
- untuk memastikan Golang sudah terinstall, buka terminal dan ketikkan perintah berikut 

	go version

* Compile & Run
- Untuk mengcompile buka terminal dan ketikkan perintah berikut
	go build main.go
- Untuk menjalankan program yang sudah di compile ketikkan perintah berikut
	./main
- Untuk menjalankan program tanpa compile, ketikkan perintah berikut
	go run main.go
.image ./images/compile.png

* Hello World
Syntax Dasar dan Sederhana untuk membuat program Hello World
.play ./examples/hello.go

* Tipe Data (Integer)
.html ./html/integer.html

* Tipe Data (Float)
.html ./html/float.html

* Tipe Data (Integer & Float - Contoh)
Syntax Dasar dan Sederhana untuk membuat program Integer & Float

  func main() {
    fmt.println("one", 1) // integer
    fmt.println("two", 2) // integer
    fmt.println("one point six", 1.6) // float
  }

* Tipe Data (Boolean)
Tipe data boolean hanya memiliki dua nilai yaitu *true* dan *false*

  func main() {
    fmt.println(true)
    fmt.println(false)
  }

Contoh Lain Penggunaan Tipe Data Boolean

  func main() {
    var laki_laki bool = false
    var perempuan bool = true

    if perempuan {
      fmt.println("Perempuan Selalu Benar")
    }else if laki_laki {
      fmt.println("Laki-laki Selalu Salah")
    }
  }

* Tipe Data (Alias)
Tipe data alias adalah tipe data yang memiliki nama lain dari tipe data aslinya. Tipe data alias ini digunakan untuk mempermudah penggunaan tipe data tersebut.

  func main() {
    type integer int
    type float float64

    var angka integer = 1
    var desimal float = 1.6

    fmt.println(angka)
    fmt.println(desimal)
  }
Tipe data alias ini dari bawaaan Golang di antaranya :
- byte = uint8
- rune = int32
- any = interface{}

* Tipe Data (Alias - Contoh)
Tipe data alias juga dapat digunakan untuk membuat tipe data baru. Contoh tipe data baru yang dibuat adalah tipe data *money* yang memiliki tipe data *int64*.

  func main() {
    type money int64

    var uang money = 1000000
    fmt.println(uang)
  }

* Tipe Data (String)
- string adalah tipe data kumpulan karakter
- Tipe data String di Go-Lang diwakili oleh kata kunci string
- Nilai data string di Go-Lang selalu dimulai dengan *"*  (tanda kutip ganda) dan diakhiri dengan *"*  (tanda kutip ganda)
- Untuk membuat string kosong, gunakan *""* (tanda kutip ganda kosong)

  func main() {
    var nama string = "Asnur"
    var alamat string = "Jl. Cipinang Melayu"
    var kota string = "Jakarta Timur"
    var negara string = "Indonesia"

    fmt.println(nama)
    fmt.println(alamat)
    fmt.println(kota)
    fmt.println(negara)
  }

* Comment (Single Line & Multi Line)
komentar adalah baris kode yang tidak akan di eksekusi oleh program. Komentar digunakan untuk memberikan penjelasan atau catatan pada kode program.

Ini adalah contoh komentar single line

  func main() {
    // ini adalah komentar
    fmt.println("Hello World")
  }

Ini adalah contoh komentar multi line

  func main() {
    /* ini adalah komentar
    yang terdiri dari beberapa baris */
    fmt.println("Hello World")
  }

* Variable
- Variable adalah wadah untuk menyimpan data
- Variable di Go-Lang diwakili oleh kata kunci var
- Nilai data variable di Go-Lang selalu dimulai dengan *var* dan tidak diakhiri dengan *;* (titik koma)

  func main() {
    var nama string = "Asnur"
    var alamat string = "Jl. Cipinang Melayu"
    var kota string = "Jakarta Timur"
    var negara string = "Indonesia"

    fmt.println(nama)
    fmt.println(alamat)
    fmt.println(kota)
    fmt.println(negara)
  }

* Variable (Multiple)
- Variable di Go-Lang juga dapat di deklarasikan secara bersamaan
- Untuk mendeklarasikan variable secara bersamaan, gunakan tanda koma (,) untuk memisahkan variable

  func main() {
    var nama, alamat, kota, negara string = "Asnur", "Jl. Cipinang Melayu", "Jakarta Timur", "Indonesia"

    fmt.println(nama)
    fmt.println(alamat)
    fmt.println(kota)
    fmt.println(negara)
  }

* Constant (Single)
- Constant adalah wadah untuk menyimpan data yang nilainya tidak dapat diubah
- Constant di Go-Lang diwakili oleh kata kunci const

  func main() {
    const nama string = "Asnur"
    const alamat string = "Jl. Cipinang Melayu"
    const kota string = "Jakarta Timur"
    const negara string = "Indonesia"

    fmt.println(nama)
    fmt.println(alamat)
    fmt.println(kota)
    fmt.println(negara)
  }

* Constant (Multiple)
- Constant di Go-Lang juga dapat di deklarasikan secara bersamaan
- Untuk mendeklarasikan constant secara bersamaan, gunakan tanda koma (,) untuk memisahkan constant

  func main() {
    const (
      firstName string = "Asnur"
      lastName string = "Ramdani"
    )
  
    //Error
    firstName = "Yusuf"
    lastName = "Rijal"
  }

* Type Declaration (Single)
- Type Declarations adalah kemampuan untuk membuat ulang tipe data baru dari tipe data yang ada
- Type Declarations biasanya digunakan untuk membuat alias untuk tipe data yang ada. dengan tujuan agar lebih mudah dipahami

  func main() {
    type NIM string
    var ktmNF NIM = "666"
    
    fmt.Println(ktmNF)
    fmt.Println(NIM("999"))
  }

* Type Declaration (Multiple)
- Type Declarations di Go-Lang juga dapat di deklarasikan secara bersamaan
- Untuk mendeklarasikan Type Declarations secara bersamaan, gunakan tanda koma (,) untuk memisahkan Type Declarations

  func main() {
    type (
      NIM string
      Nama string
    )
    
    var ktmNF NIM = "666"
    var namaMahasiswa Nama = "Asnur"
    
    fmt.Println(ktmNF)
    fmt.Println(namaMahasiswa)
  }

* Math (Operator Aritmatika)
- Operator Aritmatika adalah operator yang digunakan untuk melakukan operasi matematika
- Operator Aritmatika di Go-Lang diwakili oleh tanda +, -, *, /, %

  func main() {
    var a int = 10
    var b int = 5
    var c int = 0    
    
    c = a + b
    fmt.Println("a + b = ", c)
    c = a - b
    fmt.Println("a - b = ", c)
    c = a * b
    fmt.Println("a * b = ", c)
    c = a / b
    fmt.Println("a / b = ", c)
    c = a % b
    fmt.Println("a % b = ", c)
  }

* Math (Augmented Assignments)
- Augmented Assignments adalah operator yang digunakan untuk melakukan operasi matematika dan mengisi nilai ke variable
- Augmented Assignments di Go-Lang diwakili oleh tanda +=, -=, *=, /=, %=

  func main() {
    var a int = 10
    var b int = 5
    var c int = 0    
    
    c += a
    fmt.Println("c += a = ", c)
    c -= a
    fmt.Println("c -= a = ", c)
    c *= a
    fmt.Println("c *= a = ", c)
    c /= a
    fmt.Println("c /= a = ", c)
    c %= a
    fmt.Println("c %= a = ", c)
  }

* Math (Unary Operator)
- Unary Operator adalah operator yang digunakan untuk melakukan operasi matematika pada satu variable


* Looping
Syntax Dasar dan Sederhana untuk membuat program Looping
.play -edit ./examples/loop.go

* Unit Testing
Syntax Dasar dan Sederhana untuk membuat program Unit Testing
.play ./examples/hello_test.go /^func TestHello/,/^}/