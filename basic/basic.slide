#GDSC NF - Speaker Series (Backend)

Go Programming Language
Fundamental of Golang

Muhammad Asnur Ramdani
Backend GIS Programmer, DPMPTSP DKI Jakarta
asnurramdhani12@gmail.com

Google Developer Student Club - STTNF

* 
.html ./html/quotes.html

* Introduction
.image ./images/golang-img.png

* Sejarah Singkat
- Bahasa pemrograman Go (atau Golang) dikembangkan oleh Google pada tahun 2007 oleh Robert Griesemer, Rob Pike, dan Ken Thompson. 
- Tujuan utama dari pengembangan Go adalah untuk membuat bahasa yang sederhana, efisien, dan mudah digunakan untuk pengembangan aplikasi skala besar di lingkungan jaringan.
- Bahasa ini dirilis sebagai open source pada tahun 2009 dan sejak itu telah menjadi populer di kalangan pengembang aplikasi web, sistem, dan aplikasi perangkat keras.

*  Kenapa Kita Golang?
- Performa yang baik
- Sederhana dan mudah dipelajari
- Skalabilitas dan Keamanan
- Cross-Platform
- Kebutuhan industri

*  Fitur Golang
- Garbage Collection
- Concurrency
- Type Inference

*  Teknologi yang dikembangkan menggunakan Golang
.html ./html/tech.html

* Perusahaan yang menggunakan Golang
.html ./html/company.html

* Download & Install
- Download Golang dan Install di [[https://golang.org][https://golang.org/dl/]].
- pilih sesuai dengan OS yang digunakan dan ikuti langkah-langkahnya.
- untuk memastikan Golang sudah terinstall, buka terminal dan ketikkan perintah berikut 

	go version

* Compile & Run
- Untuk mengcompile buka terminal dan ketikkan perintah berikut
	go build main.go
- Untuk menjalankan program yang sudah di compile ketikkan perintah berikut
	./main
- Untuk menjalankan program tanpa compile, ketikkan perintah berikut
	go run main.go
.image ./images/compile.png

* Hello World
Syntax Dasar dan Sederhana untuk membuat program Hello World
.play ./examples/hello.go

* Tipe Data (Integer)
.html ./html/integer.html

* Tipe Data (Float)
.html ./html/float.html

* Tipe Data (Integer & Float - Contoh)
Syntax Dasar dan Sederhana untuk membuat program Integer & Float

  func main() {
    fmt.println("one", 1) // integer
    fmt.println("two", 2) // integer
    fmt.println("one point six", 1.6) // float
  }

* Tipe Data (Boolean)
Tipe data boolean hanya memiliki dua nilai yaitu *true* dan *false*

  func main() {
    fmt.println(true)
    fmt.println(false)
  }

Contoh Lain Penggunaan Tipe Data Boolean

  func main() {
    var laki_laki bool = false
    var perempuan bool = true

    if perempuan {
      fmt.println("Perempuan Selalu Benar")
    }else if laki_laki {
      fmt.println("Laki-laki Selalu Salah")
    }
  }

* Tipe Data (Alias)
Tipe data alias adalah tipe data yang memiliki nama lain dari tipe data aslinya. Tipe data alias ini digunakan untuk mempermudah penggunaan tipe data tersebut.

  func main() {
    type integer int
    type float float64

    var angka integer = 1
    var desimal float = 1.6

    fmt.println(angka)
    fmt.println(desimal)
  }
Tipe data alias ini dari bawaaan Golang di antaranya :
- byte = uint8
- rune = int32
- any = interface{}

* Tipe Data (Alias - Contoh)
Tipe data alias juga dapat digunakan untuk membuat tipe data baru. Contoh tipe data baru yang dibuat adalah tipe data *money* yang memiliki tipe data *int64*.

  func main() {
    type money int64

    var uang money = 1000000
    fmt.println(uang)
  }

* Tipe Data (String)
- string adalah tipe data kumpulan karakter
- Tipe data String di Go-Lang diwakili oleh kata kunci string
- Nilai data string di Go-Lang selalu dimulai dengan *"*  (tanda kutip ganda) dan diakhiri dengan *"*  (tanda kutip ganda)
- Untuk membuat string kosong, gunakan *""* (tanda kutip ganda kosong)

  func main() {
    var nama string = "Asnur"
    var alamat string = "Jl. Cipinang Melayu"
    var kota string = "Jakarta Timur"
    var negara string = "Indonesia"

    fmt.println(nama)
    fmt.println(alamat)
    fmt.println(kota)
    fmt.println(negara)
  }

* Comment (Single Line & Multi Line)
komentar adalah baris kode yang tidak akan di eksekusi oleh program. Komentar digunakan untuk memberikan penjelasan atau catatan pada kode program.

Ini adalah contoh komentar single line

  func main() {
    // ini adalah komentar
    fmt.println("Hello World")
  }

Ini adalah contoh komentar multi line

  func main() {
    /* ini adalah komentar
    yang terdiri dari beberapa baris */
    fmt.println("Hello World")
  }

* Variable
- Variable adalah wadah untuk menyimpan data
- Variable di Go-Lang diwakili oleh kata kunci var
- Nilai data variable di Go-Lang selalu dimulai dengan *var* dan tidak diakhiri dengan *;* (titik koma)

  func main() {
    var nama string = "Asnur"
    var alamat string = "Jl. Cipinang Melayu"
    var kota string = "Jakarta Timur"
    var negara string = "Indonesia"

    fmt.println(nama)
    fmt.println(alamat)
    fmt.println(kota)
    fmt.println(negara)
  }

* Variable (Multiple)
- Variable di Go-Lang juga dapat di deklarasikan secara bersamaan
- Untuk mendeklarasikan variable secara bersamaan, gunakan tanda koma (,) untuk memisahkan variable

  func main() {
    var nama, alamat, kota, negara string = "Asnur", "Jl. Cipinang Melayu", "Jakarta Timur", "Indonesia"

    fmt.println(nama)
    fmt.println(alamat)
    fmt.println(kota)
    fmt.println(negara)
  }

* Constant (Single)
- Constant adalah wadah untuk menyimpan data yang nilainya tidak dapat diubah
- Constant di Go-Lang diwakili oleh kata kunci const

  func main() {
    const nama string = "Asnur"
    const alamat string = "Jl. Cipinang Melayu"
    const kota string = "Jakarta Timur"
    const negara string = "Indonesia"

    fmt.println(nama)
    fmt.println(alamat)
    fmt.println(kota)
    fmt.println(negara)
  }

* Constant (Multiple)
- Constant di Go-Lang juga dapat di deklarasikan secara bersamaan
- Untuk mendeklarasikan constant secara bersamaan, gunakan tanda koma (,) untuk memisahkan constant

  func main() {
    const (
      firstName string = "Asnur"
      lastName string = "Ramdani"
    )
  
    //Error
    firstName = "Yusuf"
    lastName = "Rijal"
  }

* Type Declaration (Single)
- Type Declarations adalah kemampuan untuk membuat ulang tipe data baru dari tipe data yang ada
- Type Declarations biasanya digunakan untuk membuat alias untuk tipe data yang ada. dengan tujuan agar lebih mudah dipahami

  func main() {
    type NIM string
    var ktmNF NIM = "666"
    
    fmt.Println(ktmNF)
    fmt.Println(NIM("999"))
  }

* Type Declaration (Multiple)
- Type Declarations di Go-Lang juga dapat di deklarasikan secara bersamaan
- Untuk mendeklarasikan Type Declarations secara bersamaan, gunakan tanda koma (,) untuk memisahkan Type Declarations

  func main() {
    type (
      NIM string
      Nama string
    )
    
    var ktmNF NIM = "666"
    var namaMahasiswa Nama = "Asnur"
    
    fmt.Println(ktmNF)
    fmt.Println(namaMahasiswa)
  }

* Math (Operator Aritmatika)
- Operator Aritmatika adalah operator yang digunakan untuk melakukan operasi matematika
- Operator Aritmatika di Go-Lang diwakili oleh tanda +, -, *, /, %

  func main() {
    var a int = 10
    var b int = 5
    var c int = 0    
    
    c = a + b
    fmt.Println("a + b = ", c)
    c = a - b
    fmt.Println("a - b = ", c)
    c = a * b
    fmt.Println("a * b = ", c)
    c = a / b
    fmt.Println("a / b = ", c)
    c = a % b
    fmt.Println("a % b = ", c)
  }

* Math (Augmented Assignments)
- Augmented Assignments adalah operator yang digunakan untuk melakukan operasi matematika dan mengisi nilai ke variable
- Augmented Assignments di Go-Lang diwakili oleh tanda +=, -=, *=, /=, %=

  func main() {
    var a int = 10
    var b int = 5
    var c int = 0    
    
    c += a
    fmt.Println("c += a = ", c)
    c -= a
    fmt.Println("c -= a = ", c)
    c *= a
    fmt.Println("c *= a = ", c)
    c /= a
    fmt.Println("c /= a = ", c)
    c %= a
    fmt.Println("c %= a = ", c)
  }

* Math (Unary Operator)
- Unary Operator adalah operator yang digunakan untuk melakukan operasi matematika pada satu variable

  func main() {
    var a = 1
    a++
    a++

    //output a = 3
    fmt.Println(a)
  }

* Comparison Operator
- Comparison Operator adalah operator yang digunakan untuk melakukan perbandingan antara dua variable
- Comparison Operator di Go-Lang diwakili oleh tanda ==, !=, >, <, >=, <=

  func main() {
    var person1 = "asnur"
    var person2 = "yusuf"

    var result bool = person1 == person2

    //output result = false
    fmt.Println(result)
  }

* Logical Operator
- Logical Operator adalah operator yang digunakan untuk melakukan operasi logika antara dua variable dan diwakili oleh tanda *&&*, *||*, *!*

  func main() {
    var a = 10
    var b = 20
    var c = 30

    var result bool = (a > b) && (a > c)

    //output result = false
    fmt.Println(result)

    result = (a > b) || (a > c)

    //output result = true
    fmt.Println(result)

    result = !(a > b)

    //output result = true
    fmt.Println(result)
  }

* Array 
- Array adalah tipe data yang digunakan untuk menyimpan sekumpulan data dengan tipe data yang sama
- Array di Go-Lang diwakili oleh tanda kurung siku ([])
- Array di Go-Lang memiliki panjang tetap, artinya setelah array dibuat, panjang array tersebut tidak dapat diubah

  func main() {
    var names [3]string
    names[0] = "Muhammad"
    names[1] = "Asnur"
    names[2] = "Ramdani"

    fmt.Println(names[0]) // output : Muhammad
    fmt.Println(names[1]) // output : Asnur
    fmt.Println(names[2]) // output : Ramdani

    //Length of Array
    fmt.Println(len(names)) // output : 3
  }

* Slice
Slice mirip dengan array, tetapi lebih kuat dan fleksibel.

  func main() {
    names := [5]string{"Abdurrahman", "Muhammad", "Asnur", "Ramdani", "Ziyad"}
    myslice := names[1:4]

    fmt.Println("My Name is = ",myslice) 
    // output : My Name is =  [Muhammad Asnur Ramdani]

  }

* Map
- Map digunakan untuk menyimpan nilai data dalam pasangan key: value.

  func main() {
    var person = map[string]string{
      "name":    "Asnur",
      "address": "Jakarta",
    }

    fmt.Println(person["name"]) // output : Asnur
    fmt.Println(person["address"]) // output : Jakarta
  }


* If Expression
- If Expression adalah statement yang digunakan untuk melakukan percabangan
- If Expression di Go-Lang diwakili oleh kata kunci *if*

  func main() {
    var a = 10
    var b = 20

    if a > b {
      fmt.Println("a lebih besar dari b")
    } else {
      fmt.Println("a lebih kecil dari b")
    }
  }

* Switch Expression
- Switch Expression adalah statement yang digunakan untuk melakukan percabangan
- Switch Expression di Go-Lang diwakili oleh kata kunci *switch*
- Switch Expression di Go-Lang juga dapat digunakan untuk melakukan percabangan dengan kondisi yang lebih kompleks

  func main() {
    var point = 8

    switch point {
    case 8:
      fmt.Println("Perfect")
    case 7:
      fmt.Println("Awesome")
    default:
      fmt.Println("Not Bad")
    }
  }

* Looping (For)
- Perulangan for digunakan untuk eksekusi blok kode tanpa henti, selama kondisi yang dijadikan acuan terpenuhi.

  func main() {
    number := 1	
    for number < 10 {
      fmt.Println("Loop to ", number)
      number ++
    }
    // output : Loop to  1 - 10
  }

* Looping (For Statement)
Perulangan for dapat mengambil hingga tiga pernyataan :
- pernyataan inisialisasi : pernyataan yang dieksekusi sebelum perulangan dimulai
- pernyataan kondisi : pernyataan yang dieksekusi sebelum setiap iterasi perulangan, Jika kondisi bernilai false, perulangan akan berhenti
- pernyataan post : pernyataan yang dieksekusi setelah setiap iterasi perulangan

  func main() {
    for i := 1; i <= 10; i++ {
      fmt.Println("Loop to ", i)
    }
    // output : Loop to  1 - 10
  }

* Looping (For Range)
*For*range* dapat digunakan untuk me-looping tipe data seperti *array* dan *map*

  func main() {
    names := []string{"Muhammad", "Asnur", "Ramdhani"}
    for index, name := range names {
      fmt.Println("Index ", index, "= ", name)
    }
  }

contoh menggunakan map

  func main() {
    person := map[string]string{"Asnur": "Bogor", "Ziyad": "Depok", "Yusuf": "Jakarta"}
    for name, address := range person {
      fmt.Println("Name :", name, " Address :", address)
    }
  }

* Break and Continue
- Break dan Continue adalah statement yang digunakan untuk menghentikan atau melanjutkan perulangan

  func main() {
    for i := 1; i <= 10; i++ {
      if i == 5 {
        continue
      }else if i == 8 {
        break
      }

      fmt.Println("Loop to ", i)
      // output : Loop to  1 - 4 - 6 - 7
    }
  }


* Challenge 1
Buatlah program untuk menampilkan bilangan ganjil dan genap dari 1 - 10
.play -edit ./examples/challange_1.go

* Function
- Function adalah sekumpulan statement yang digunakan untuk melakukan suatu tugas tertentu
- Function di Go-Lang diwakili oleh kata kunci *func*
- Function di Go-Lang dapat memiliki parameter dan return value

  func main() {
    sayHello("Asnur")
  }

  func sayHello(name string) {
    fmt.Println("Hello", name)
  }

* Function Return Value
- Function di Go-Lang dapat memiliki return value
- Return value di Go-Lang dapat lebih dari satu

  func main() {
    result := calculate(10, 10)

    fmt.Println(result)

    var grade, pass = grade(90)

    fmt.Println("Grade : ", grade)
    fmt.Println("Pass : ", pass)
  }

  func calculate(value1 int, value2 int) int {
    var result = value1 + value2

    return result
  }

* Function Return Multiple Value 
  func grade(value int) (string, bool) {
    var grade string
    var pass bool

    if value > 90 {
      grade = "A"
      pass = true
    } else if value > 80 {
      grade = "B"
      pass = true
    } else if value > 70 {
      grade = "C"
      pass = true
    } else if value > 60 {
      grade = "D"
      pass = true
    } else {
      grade = "E"
      pass = false
    }

    return grade, pass
  }

* Function Recursion
- Function Recursion adalah function yang memanggil dirinya sendiri

  func main() {
    var result = factorial(5)
    fmt.Println(result)
  }

  func factorial(value int) int {
    if value == 1 {
      return 1
    } else {
      return value * factorial(value - 1)
    }
  }

* Pointer
- Pointer adalah variabel yang menyimpan alamat memori
- Pointer di Go-Lang diwakili oleh tanda * (asterisk)
- Untuk mendapatkan alamat memori dari sebuah variabel, gunakan operator & (ampersand)

.play -edit ./examples/pointer.go

* Struct
- Tipe data yang digunakan untuk menyimpan kumpulan dari beberapa tipe data yang berbeda.
- Struct digunakan untuk menyimpan data yang terkait dengan satu entitas tertentu, seperti objek dalam OOP.

  type Person struct {
    Name string
    Address string
    Age int
  }

  func main() {
    var person = Person{"Asnur", "Bogor", 20}
    fmt.Println(person.Name)
    fmt.Println(person.Address)
    fmt.Println(person.Age)
  }

* Struct Method
- Method adalah function yang berada di dalam struct

  type Person struct {
      name string
      age  int
      address string
  }

  func (p *Person) setAddress(newAddress string) {
      p.address = newAddress
  }

  func (p *Person) getAddress() string {
      return p.address
  }

  func main() {
      person := Person{name: "Asnur", age: 21, address: "Gatau"}
      
      person.setAddress("Bogor")
      fmt.Println("Alamat:",person.getAddress())
      // Output: Alamat: Bogor
  }

* Interface
- Interface adalah kumpulan dari method-method yang harus diimplementasikan oleh sebuah struct
- Interface di Go-Lang diwakili oleh kata kunci *interface*

  type Person interface {
    getName() string
    setName(string)
  }

  type Student struct {
    name string
  }

  type Teacher struct {
    name string
  }

* Interface

  func (s Student) getName() string {
    return s.name
  }

  func (s Student) setName(name string) {
    s.name = name
  }


  func (t Teacher) getName() string {
    return t.name
  }

  func (t Teacher) setName(name string) {
    t.name = name
  }

  func displayName(p Person) {
    fmt.Println(p.getName())
  }

* Interface

  func main() {
    var student Student
    student.setName("Abdurrahman Ziyad")
    displayName(&student)

    var teacher Teacher
    teacher.setName("Muhammad Asnur")
    displayName(&teacher)
  }